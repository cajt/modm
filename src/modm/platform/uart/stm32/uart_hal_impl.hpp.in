/*
 * Copyright (c) 2013-2014, 2016, Kevin Läufer
 * Copyright (c) 2013-2017, Niklas Hauser
 * Copyright (c) 2017, Fabian Greif
 * Copyright (c) 2017, Sascha Schade
 * Copyright (c) 2018, Christopher Durand
 * Copyright (c) 2018, Lucas Mösch
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

%% set name = uart_name ~ "Hal" ~ id
%% set peripheral = uart_name | upper ~ id

#ifndef MODM_STM32_UARTHAL_{{ id }}_HPP
#	error 	"Don't include this file directly, use uart_hal_{{ id }}.hpp instead!"
#endif
#include <modm/platform/clock/rcc.hpp>

// ----------------------------------------------------------------------------
void
modm::platform::{{ name }}::setParity(const Parity parity)
{
%% if "extended" in driver["type"]
	const bool usartEnabled = ({{ peripheral }}->CR1 & USART_CR1_UE);
	if(usartEnabled) {
		disableOperation();
	}
%% endif

	uint32_t flags = {{ peripheral }}->CR1;
	flags &= ~(USART_CR1_PCE | USART_CR1_PS | USART_CR1_M);
	flags |= static_cast<uint32_t>(parity);
	if (parity != Parity::Disabled) {
		// Parity Bit counts as 9th bit -> enable 9 data bits
#ifdef USART_CR1_M1
		flags |= USART_CR1_M0;
#else
		flags |= USART_CR1_M;
#endif
	}
	{{ peripheral }}->CR1 = flags;

%% if "extended" in driver["type"]
	if(usartEnabled) {
		enableOperation();
	}
%% endif
}

void
modm::platform::{{ name }}::enable()
{
	Rcc::enable<Peripheral::{{ uart_name ~ id }}>();
	{{ peripheral }}->CR1 |= USART_CR1_UE;		// Uart Enable
}

void
modm::platform::{{ name }}::disable()
{
	// TX, RX, Uart, etc. Disable
	{{ peripheral }}->CR1 = 0;
	Rcc::disable<Peripheral::{{ uart_name ~ id }}>();
}
%% if target["family"] != "f1"
template<class SystemClock, modm::baudrate_t baudrate,
		modm::platform::{{ name }}::OversamplingMode oversample>
void modm_always_inline
modm::platform::{{ name }}::initialize(Parity parity)
{
	initializeWithBrr(UartBaudrate::getBrr<SystemClock::{{ uart_name ~ id }}, baudrate>(), parity, oversample);
}
%% endif

template<class SystemClock, modm::baudrate_t baudrate>
void modm_always_inline
modm::platform::{{ name }}::initialize(Parity parity)
{
%% if target["family"] == "f1"
	initializeWithBrr(UartBaudrate::getBrr<SystemClock::{{ uart_name ~ id }}, baudrate>(), parity);
%% else
	initializeWithBrr(UartBaudrate::getBrr<SystemClock::{{ uart_name ~ id }}, baudrate>(), parity,
					  UartBaudrate::getOversamplingMode(SystemClock::{{ uart_name ~ id }}, baudrate));
%% endif
}


void inline
%% if target["family"] != "f1"
modm::platform::{{ name }}::initializeWithBrr(uint16_t brr, Parity parity, OversamplingMode oversample)
%% else
modm::platform::{{ name }}::initializeWithBrr(uint16_t brr, Parity parity)
%% endif
{
	enable();
	// DIRTY HACK: disable and reenable uart to be able to set
	//             baud rate as well as parity
	{{ peripheral }}->CR1 &= ~USART_CR1_UE;	// Uart Disable
	// set baudrate
	{{ peripheral }}->BRR = brr;
	setParity(parity);
%% if target["family"] != "f1"
	setOversamplingMode(oversample);
%% endif
	{{ peripheral }}->CR1 |=  USART_CR1_UE;	// Uart Reenable
}

%% if target["family"] != "f1"
void
modm::platform::{{ name }}::setOversamplingMode(OversamplingMode mode)
{
%% if "extended" in driver["type"]
	const bool usartEnabled = ({{ peripheral }}->CR1 & USART_CR1_UE);
	if(usartEnabled) {
		disableOperation();
	}
%% endif

	if(mode == OversamplingMode::By16) {
		{{ peripheral }}->CR1 &= ~static_cast<uint32_t>(OversamplingMode::By8);
	} else {
		{{ peripheral }}->CR1 |=  static_cast<uint32_t>(OversamplingMode::By8);
	}

%% if "extended" in driver["type"]
	if(usartEnabled) {
		enableOperation();
	}
%% endif
}
%% endif
%% if uart_name == "Usart"

void
modm::platform::{{ name }}::setSpiClock(SpiClock clk)
{
%% if "extended" in driver["type"]
	const bool usartEnabled = ({{ peripheral }}->CR1 & USART_CR1_UE);
	if(usartEnabled) {
		disableOperation();
	}
%% endif

	if(clk == SpiClock::Disabled) {
		{{ peripheral }}->CR2 &= ~static_cast<uint32_t>(SpiClock::Enabled);
	} else {
		{{ peripheral }}->CR2 |=  static_cast<uint32_t>(SpiClock::Enabled);
	}

	%% if "extended" in driver["type"]
	if(usartEnabled) {
		enableOperation();
	}
	%% endif
}

void
modm::platform::{{ name }}::setSpiDataMode(SpiDataMode mode)
{
%% if "extended" in driver["type"]
	const bool usartEnabled = ({{ peripheral }}->CR1 & USART_CR1_UE);
	if(usartEnabled) {
		disableOperation();
	}
%% endif

	{{ peripheral }}->CR2 =
		({{ peripheral }}->CR2 & ~static_cast<uint32_t>(SpiDataMode::Mode3))
		| static_cast<uint32_t>(mode);

%% if "extended" in driver["type"]
	if(usartEnabled) {
		enableOperation();
	}
%% endif
}

void
modm::platform::{{ name }}::setWordLength(WordLength length)
{
%% if "extended" in driver["type"]
	const bool usartEnabled = ({{ peripheral }}->CR1 & USART_CR1_UE);
	if(usartEnabled) {
		disableOperation();
	}
%% endif

	{{ peripheral }}->CR1 =
#ifdef USART_CR1_M1
		({{ peripheral }}->CR1 & ~(USART_CR1_M0 | USART_CR1_M1))
#else
		({{ peripheral }}->CR1 & ~USART_CR1_M)
#endif
		| static_cast<uint32_t>(length);

%% if "extended" in driver["type"]
	if(usartEnabled) {
		enableOperation();
	}
%% endif
}

void
modm::platform::{{ name }}::setLastBitClockPulse(LastBitClockPulse pulse)
{
%% if "extended" in driver["type"]
	const bool usartEnabled = ({{ peripheral }}->CR1 & USART_CR1_UE);
	if(usartEnabled) {
		disableOperation();
	}
%% endif

	if(pulse == LastBitClockPulse::DoNotOutput) {
		{{ peripheral }}->CR2 &= ~static_cast<uint32_t>(LastBitClockPulse::Output);
	} else {
		{{ peripheral }}->CR2 |=  static_cast<uint32_t>(LastBitClockPulse::Output);
	}

%% if "extended" in driver["type"]
	if(usartEnabled) {
		enableOperation();
	}
%% endif
}
%% endif

void
modm::platform::{{ name }}::write(uint8_t data)
{
%% if "extended" in driver["type"]
	{{ peripheral }}->TDR = data;
%% else
	{{ peripheral }}->DR = data;
%% endif
}

void
modm::platform::{{ name }}::read(uint8_t &data)
{
%% if "extended" in driver["type"]
	data = {{ peripheral }}->RDR;
%% else
	data = {{ peripheral }}->DR;
%% endif
}

void
modm::platform::{{ name }}::setTransmitterEnable(const bool enable)
{
	if (enable) {
		{{ peripheral }}->CR1 |=  USART_CR1_TE;
	} else {
		{{ peripheral }}->CR1 &= ~USART_CR1_TE;
	}
}

void
modm::platform::{{ name }}::setReceiverEnable(bool enable)
{
	if (enable) {
		{{ peripheral }}->CR1 |=  USART_CR1_RE;
	} else {
		{{ peripheral }}->CR1 &= ~USART_CR1_RE;
	}
}

void
modm::platform::{{ name }}::enableOperation()
{
	{{ peripheral }}->CR1 |= USART_CR1_UE;
}

void
modm::platform::{{ name }}::disableOperation()
{
	{{ peripheral }}->CR1 &= ~USART_CR1_UE;
}

bool
modm::platform::{{ name }}::isReceiveRegisterNotEmpty()
{
%% if "extended" in driver["type"]
	return {{ peripheral }}->ISR & USART_ISR_RXNE;
%% else
	return {{ peripheral }}->SR & USART_SR_RXNE;
%% endif
}

bool
modm::platform::{{ name }}::isTransmitRegisterEmpty()
{
%% if "extended" in driver["type"]
	return {{ peripheral }}->ISR & USART_ISR_TXE;
%% else
	return {{ peripheral }}->SR & USART_SR_TXE;
%% endif
}

void
modm::platform::{{ name }}::enableInterruptVector(bool enable, uint32_t priority)
{
%% if id in shared_irq_ids
	%% set irq = shared_irq
%% else
	%% set irq = peripheral
%% endif
	if (enable) {
		// Set priority for the interrupt vector
		NVIC_SetPriority({{ irq }}_IRQn, priority);

		// register IRQ at the NVIC
		NVIC_EnableIRQ({{ irq }}_IRQn);
	}
	else {
		NVIC_DisableIRQ({{ irq }}_IRQn);
	}
}

void
modm::platform::{{ name }}::enableInterrupt(Interrupt_t interrupt)
{
	{{ peripheral }}->CR1 |= interrupt.value;
}

void
modm::platform::{{ name }}::disableInterrupt(Interrupt_t interrupt)
{
	{{ peripheral }}->CR1 &= ~interrupt.value;
}

modm::platform::{{ name }}::InterruptFlag_t
modm::platform::{{ name }}::getInterruptFlags()
{
%% if "extended" in driver["type"]
	return InterruptFlag_t( {{ peripheral }}->ISR );
%% else
	return InterruptFlag_t( {{ peripheral }}->SR );
%% endif
}

void
modm::platform::{{ name }}::acknowledgeInterruptFlags(InterruptFlag_t flags)
{
%% if "extended" in driver["type"]
	// Not all flags can be cleared by writing to this reg
#ifdef USART_ICR_NECF
#define USART_ICR_NCF USART_ICR_NECF
#endif
	%% if target["family"] == "f0" and target["name"] in ["30", "70"]
	const uint32_t mask = USART_ICR_PECF  | USART_ICR_FECF   |
		USART_ICR_NCF   | USART_ICR_ORECF | USART_ICR_IDLECF |
		USART_ICR_TCCF  | USART_ICR_CTSCF  |
		USART_ICR_RTOCF | USART_ICR_CMCF;
	%% else
	const uint32_t mask = USART_ICR_PECF  | USART_ICR_FECF   |
		USART_ICR_NCF   | USART_ICR_ORECF | USART_ICR_IDLECF |
		USART_ICR_TCCF  | USART_ICR_CTSCF | USART_ICR_RTOCF  |
		USART_ICR_CMCF
#ifdef USART_ICR_LBDCF // F0x0 do not have LIN mode!
		| USART_ICR_LBDCF
#endif
#ifdef USART_ICR_EOBCF // F0x0 do not have Smartcard mode!
		| USART_ICR_EOBCF
#endif
#ifdef USART_ICR_WUCF
		| USART_ICR_WUCF
#endif
		;
	%% endif
	// Flags are cleared by writing a one to the flag position.
	// Writing a zero is (hopefully) ignored.
	{{ peripheral }}->ICR = (flags.value & mask);
%% else
	/* Interrupts must be cleared manually by accessing SR and DR.
	 * Overrun Interrupt, Noise flag detected, Framing Error, Parity Error
	 * p779: "It is cleared by a software sequence (an read to the
	 * USART_SR register followed by a read to the USART_DR register"
	 */
	if (flags & InterruptFlag::OverrunError) {
		uint32_t tmp;
		tmp = {{ peripheral }}->SR;
		tmp = {{ peripheral }}->DR;
		(void) tmp;
	}
	(void) flags;	// avoid compiler warning
%% endif
}
